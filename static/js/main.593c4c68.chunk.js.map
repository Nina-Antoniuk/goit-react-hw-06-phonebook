{"version":3,"sources":["components/ContactsListElement/ContactsListElement.module.css","components/Form/Form.module.css","components/Contacts/Contacts.module.css","redux/contacts/сontacts-action.js","components/Form/Form.js","redux/contacts/contacts-selectors.js","components/Filter/Filter.js","components/ContactsListElement/ContactsListElement.js","components/Contacts/Contacts.js","App.js","redux/contacts/сontacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","contact","payload","id","uuidv1","deleteContact","filteredContacts","Form","useState","name","setName","number","setNumber","dispatch","useDispatch","inputChange","e","target","value","console","log","reset","className","s","form","onSubmit","preventDefault","actions","htmlFor","type","pattern","title","required","autoComplete","onChange","button","getSearchValue","state","filter","getVisibleContatcs","contacts","getContacts","normalizedFilter","toLocaleLowerCase","toLowerCase","includes","Filter","useSelector","inputID","ContactsListElement","onClick","listItem","deleteBtn","Contacts","allContacts","list","map","el","parentNode","App","createReducer","action","contactsReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,SAAW,sCAAsC,KAAO,kCAAkC,UAAY,yC,mBCAxHD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,MAAQ,oBAAoB,UAAY,0B,mBCAlHD,EAAOC,QAAU,CAAC,KAAO,yB,yLCEZC,EAAaC,YAAa,gBAAgB,SAAAC,GAAO,MAAK,CACjEC,QAAQ,2BACHD,GADE,IAELE,GAAIC,oBAGKC,EAAgBL,YAAa,mBAC7BM,EAAmBN,YAAa,mB,OCkE9BO,MAvEf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAWC,cAEXC,EAAc,SAAAC,GAClB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,SACHN,EAAUM,GACV,MACF,QACEC,QAAQC,IAAI,UAUZC,EAAQ,WACZX,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAMU,UAAWC,IAAEC,KAAMC,SAZZ,SAAAT,GACbA,EAAEU,iBACFb,EAASc,EAAmB,CAAElB,OAAME,YACpCU,KASA,UACE,uBAAOC,UAAU,QAAQM,QAAQ,SAAjC,kBAGA,uBACEzB,GAAG,SACHmB,UAAU,QACVO,KAAK,OACLpB,KAAK,OACLqB,QAAQ,yHACRC,MAAM,kcAENC,UAAQ,EACRC,aAAa,MACbf,MAAOT,EACPyB,SAAUnB,IAEZ,uBAAOO,UAAU,QAAQM,QAAQ,WAAjC,oBAGA,uBACEzB,GAAG,WACHmB,UAAU,QACVO,KAAK,MACLpB,KAAK,SACLqB,QAAQ,yFACRC,MAAM,8iBAENC,UAAQ,EACRC,aAAa,MACbf,MAAOP,EACPuB,SAAUnB,IAEZ,wBAAQO,UAAWC,IAAEY,OAAQN,KAAK,SAAlC,6BCpEOO,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QAEhCC,EAAqB,SAAAF,GAChC,IAAMG,EAJmB,SAAAH,GAAK,OAAIA,EAAMG,SAIvBC,CAAYJ,GAEvBK,EADcN,EAAeC,GACEM,oBAErC,OAAOH,EAASF,QAAO,SAAArC,GACrB,OAAOA,EAAQQ,KAAKmC,cAAcC,SAASH,OC0BhCI,MA9Bf,WACE,IAAM5B,EAAQ6B,YAAYX,GACpBvB,EAAWC,cACXkC,EAAU5C,cAMhB,OACE,qCACE,uBAAOkB,UAAU,QAAQM,QAASoB,EAAlC,mCAIA,uBACE7C,GAAI6C,EACJ1B,UAAU,QACVb,KAAK,SACLoB,KAAK,OACLC,QAAQ,yFACRC,MAAM,0IACNE,aAAa,MACbf,MAAOA,EACPgB,SAnBW,SAAAlB,GACfH,EAASP,EAAiBU,EAAEC,OAAOC,e,kCCUxB+B,MAlBf,YAA6D,IAA9B9C,EAA6B,EAA7BA,GAAIM,EAAyB,EAAzBA,KAAME,EAAmB,EAAnBA,OAAQuC,EAAW,EAAXA,QAC/C,OACE,qBAAI5B,UAAWC,IAAE4B,SAAUhD,GAAIA,EAA/B,UACE,uBAAMmB,UAAWC,IAAEd,KAAnB,UAA0BA,EAA1B,OADF,IAC2CE,EACzC,wBAAQW,UAAWC,IAAE6B,UAAWvB,KAAK,SAASqB,QAASA,EAAvD,wBCoBSG,MArBf,WACE,IAAMC,EAAcP,YAAYR,GAC1B1B,EAAWC,cAEjB,OACE,oBAAIQ,UAAWC,IAAEgC,KAAjB,SACGD,EAAYE,KAAI,SAAAC,GACf,OACE,cAAC,EAAD,CAEEtD,GAAIsD,EAAGtD,GACPM,KAAMgD,EAAGhD,KACTE,OAAQ8C,EAAG9C,OACXuC,QAAS,SAAAlC,GAAC,OAAIH,EAASR,EAAcW,EAAEC,OAAOyC,WAAWvD,OAJpDsD,EAAGtD,UCMLwD,I,EAAAA,EAhBf,WACE,OACE,sBAAKrC,UAAU,MAAf,UACE,sBAAKA,UAAU,UAAf,UACE,2CACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,UAAf,UACE,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,W,sBCXFkB,EAAWoB,YAAc,IAAD,mBAC3BjC,EAAmBE,MAAO,SAACQ,EAAOwB,GAAR,4BAAuBxB,GAAvB,CAA8BwB,EAAO3D,aADpC,cAE3ByB,EAAsBE,MAAO,SAACQ,EAAOwB,GAAR,OAC5BxB,EAAMC,QAAO,qBAAGnC,KAAgB0D,EAAO3D,cAHb,IAMxBoC,EAASsB,YAAc,GAAD,eACzBjC,EAAyBE,MAAO,SAACQ,EAAOwB,GAAR,OAA4BA,EAAO3D,YAGzD4D,EAAkBC,YAAgB,CAC7CvB,WACAF,WCbW0B,EAAQC,YAAe,CAAEC,QAASJ,ICI/CK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.593c4c68.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactsListElement_listItem__9YxUn\",\"name\":\"ContactsListElement_name__AuqZk\",\"deleteBtn\":\"ContactsListElement_deleteBtn__1w8vX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__23AAo\",\"button\":\"Form_button__2afyY\",\"input\":\"Form_input__csZFl\",\"deleteBtn\":\"Form_deleteBtn__2ZiOg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__2s7wn\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v1 as uuidv1 } from 'uuid';\n\nexport const addContact = createAction('contacts/add', contact => ({\n  payload: {\n    ...contact,\n    id: uuidv1(),\n  },\n}));\nexport const deleteContact = createAction('contacts/delete');\nexport const filteredContacts = createAction('contacts/filter');\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport s from './Form.module.css';\nimport * as actions from '../../redux/contacts/сontacts-action';\n\nfunction Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const inputChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.log('oops');\n    }\n  };\n\n  const submit = e => {\n    e.preventDefault();\n    dispatch(actions.addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={submit}>\n      <label className=\"label\" htmlFor=\"nameId\">\n        Name\n      </label>\n      <input\n        id=\"nameId\"\n        className=\"input\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов.\n          Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        autoComplete=\"off\"\n        value={name}\n        onChange={inputChange}\n      />\n      <label className=\"label\" htmlFor=\"numberId\">\n        Number\n      </label>\n      <input\n        id=\"numberId\"\n        className=\"input\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, \n          круглые скобки и может начинаться с +\"\n        required\n        autoComplete=\"off\"\n        value={number}\n        onChange={inputChange}\n      />\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","export const getContacts = state => state.contacts;\r\nexport const getSearchValue = state => state.filter;\r\n\r\nexport const getVisibleContatcs = state => {\r\n  const contacts = getContacts(state);\r\n  const searchValue = getSearchValue(state);\r\n  const normalizedFilter = searchValue.toLocaleLowerCase();\r\n\r\n  return contacts.filter(contact => {\r\n    return contact.name.toLowerCase().includes(normalizedFilter);\r\n  });\r\n};\r\n","import { useDispatch, useSelector } from 'react-redux';\nimport { v1 as uuidv1 } from 'uuid';\nimport { filteredContacts } from '../../redux/contacts/сontacts-action';\nimport { getSearchValue } from '../../redux/contacts/contacts-selectors';\n\nfunction Filter() {\n  const value = useSelector(getSearchValue);\n  const dispatch = useDispatch();\n  const inputID = uuidv1();\n\n  const onChange = e => {\n    dispatch(filteredContacts(e.target.value));\n  };\n\n  return (\n    <>\n      <label className=\"label\" htmlFor={inputID}>\n        Find contacts by name\n      </label>\n\n      <input\n        id={inputID}\n        className=\"input\"\n        name=\"filter\"\n        type=\"text\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Введите имя которое ищите\"\n        autoComplete=\"off\"\n        value={value}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport s from './ContactsListElement.module.css';\n\nfunction ContactsListElement({ id, name, number, onClick }) {\n  return (\n    <li className={s.listItem} id={id}>\n      <span className={s.name}>{name}:</span> {number}\n      <button className={s.deleteBtn} type=\"button\" onClick={onClick}>\n        Delete\n      </button>\n    </li>\n  );\n}\n\nContactsListElement.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default ContactsListElement;\n","import { useDispatch, useSelector } from 'react-redux';\nimport s from './Contacts.module.css';\nimport { getVisibleContatcs } from '../../redux/contacts/contacts-selectors';\nimport { deleteContact } from '../../redux/contacts/сontacts-action';\nimport ContactsListElement from '../ContactsListElement';\n\nfunction Contacts() {\n  const allContacts = useSelector(getVisibleContatcs);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.list}>\n      {allContacts.map(el => {\n        return (\n          <ContactsListElement\n            key={el.id}\n            id={el.id}\n            name={el.name}\n            number={el.number}\n            onClick={e => dispatch(deleteContact(e.target.parentNode.id))}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default Contacts;\n","import './App.css';\nimport Form from './components/Form';\nimport Filter from './components/Filter';\nimport Contacts from './components/Contacts';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <h2>Phonebook</h2>\n        <Form />\n      </div>\n      <div className=\"wrapper\">\n        <h2>Contacts</h2>\n        <Filter />\n        <Contacts />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport * as actions from './сontacts-action';\n\nconst contacts = createReducer([], {\n  [actions.addContact.type]: (state, action) => [...state, action.payload],\n  [actions.deleteContact.type]: (state, action) =>\n    state.filter(({ id }) => id !== action.payload),\n});\n\nconst filter = createReducer('', {\n  [actions.filteredContacts.type]: (state, action) => (state = action.payload),\n});\n\nexport const contactsReducer = combineReducers({\n  contacts,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { contactsReducer } from './contacts/сontacts-reducer';\n\nexport const store = configureStore({ reducer: contactsReducer });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}